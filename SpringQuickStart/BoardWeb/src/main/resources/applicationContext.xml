<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- <bean class="polymorphism.SamsungTV" /> -->

	<!-- <bean id="tv" class="polymorphism.SamsungTV" init-method="initMethod"/> -->
	
	<!-- <bean id="tv" class="polymorphism.SamsungTV" destroy-method="destroyMethod"/> -->
	
	<!-- <bean id="tv" class="polymorphism.SamsungTV" lazy-init="true"/> -->
	
	<!-- <bean id="tv" class="polymorphism.SamsungTV" scope="singleton"/> -->
	
	<!-- <bean id="tv" class="polymorphism.SamsungTV" scope="prototype"/> -->
	<!-- <bean id="tv" class="polymorphism.SamsungTV" /> -->
	
	<!-- <bean id="tv" class="polymorphism.SamsungTV">
		<constructor-arg ref="apple"></constructor-arg>
		<constructor-arg value="2700000"></constructor-arg>
	</bean> -->
	
	<!-- <bean id="tv" class="polymorphism.SamsungTV">
		<property name="speaker" ref="apple"></property>
		<property name="price" value="2700000"></property>
	</bean>
	
	<bean id="sony" class="polymorphism.SonySpeaker"></bean>
	<bean id="apple" class="polymorphism.AppleSpeaker"></bean> -->
	
<!-- 	<bean id="tv" class="polymorphism.SamsungTV" p:speaker-ref="sony" p:price="2700000" />
	<bean id="sony" class="polymorphism.SonySpeaker"></bean>
	<bean id="apple" class="polymorphism.AppleSpeaker"></bean> -->
	
	<!-- List 타입 매핑 -->
<!-- 	<bean id="collectionBean" class="com.springbook.ioc.injection.CollectionBean">
		<property name="addressList">
			<list>
				<value>서울시 강남구 역삼동</value>
				<value>서울시 구로구 가산동</value>
			</list>
		</property>	
	</bean> -->
	
	<!-- Set 타입 매핑 -->
<!-- 	<bean id="collectionBean" class="com.springbook.ioc.injection.CollectionBean">
		<property name="addressList">
			<set value-type="java.lang.String">
				<value>서울시 강남구 역삼동</value>
				<value>서울시 구로구 가산동</value>
				<value>서울시 구로구 가산동</value>
			</set>
		</property>	
	</bean> -->
	
	<!-- Map 타입 매핑 -->
<!-- 	<bean id="collectionBean" class="com.springbook.ioc.injection.CollectionBean">
		<property name="addressList">
			<map value-type="java.lang.String">
				<entry>
					<key><value>고길동</value></key>
					<value>서울시 강남구 역삼동</value>
				</entry>
				<entry>
					<key><value>하파</value></key>
					<value>서울시 구로구 가리봉동</value>
				</entry>
			</map>
		</property>	
	</bean> -->
	
<!-- 	<property name="addressList">
		<props>
			<prop key="고길동">서울시 강남구 역삼동</prop>
			<prop key="마이콜">서울시 강남구 화곡동</prop>
		</props>
	</property> -->
	
	<!-- <context:component-scan base-package="polymorphism"></context:component-scan>
	<bean class="polymorphism.SonySpeaker"></bean> -->
	
	<!-- <context:component-scan base-package="com.springbook.biz" /> -->
	<!-- <bean id="userService" class="com.springbook.biz.user.impl.UserServiceImpl">
		<property name="userDAO" ref="userDAO" />
	</bean>
	
	<bean id="userDAO" class="com.springbook.biz.user.impl.UserDAO" /> -->
	
	<!-- 애노테이션 적용 -->
	
	<!-- aop 적용 -->
	<!-- <bean id="log" class="com.springbook.biz.common.LogAdvice"></bean> -->
	<!-- <bean id="log" class="com.springbook.biz.common.Log4jAdvice"></bean> -->
	<!-- <bean id="before" class="com.springbook.biz.common.BeforeAdvice"></bean> -->
	<!-- <bean id="afterReturning" class="com.springbook.biz.common.AfterReturningAdvice"></bean> -->
	<!-- <bean id="afterThrowing" class="com.springbook.biz.common.AfterThrowingAdvice"></bean> -->
	<!-- <bean id="after" class="com.springbook.biz.common.AfterAdvice"></bean> -->
	<!-- <bean id="around" class="com.springbook.biz.common.AroundAdvice"></bean>
	
	<aop:config>
		<aop:pointcut expression="execution(* com.springbook.biz..*Impl.*(..))" id="allPointcut"/>
		
		<aop:aspect ref="around">
			<aop:around method="aroundLog" pointcut-ref="allPointcut"/>
		</aop:aspect> -->
		
		<!-- <aop:pointcut expression="execution(* com.springbook.biz..*Impl.get*(..))" id="getPointcut"/> -->
		<!-- <aop:aspect ref="log"> -->
		<!-- <aop:aspect ref="before"> -->
		<!-- <aop:aspect ref="afterReturning"> -->
		<!-- <aop:aspect ref="afterThrowing"> -->		
			<!-- <aop:after method="printLogging" pointcut-ref="getPointcut"/> -->
			<!-- <aop:before method="printLogging" pointcut-ref="allPointcut"/> -->
			<!-- <aop:before method="printLogging" pointcut-ref="getPointcut"/> -->
			<!-- <aop:before method="beforeLog" pointcut-ref="allPointcut"/> -->
			<!-- <aop:after method="afterLog" pointcut-ref="allPointcut"/> -->
			<!-- <aop:after-throwing method="exceptionLog" pointcut-ref="allPointcut"/> -->
			<!-- <aop:after-returning method="afterLog" pointcut-ref="getPointcut" returning="returnObj"/> -->
		<!-- </aop:aspect> -->
		<!-- <aop:aspect ref="after">
			<aop:after method="finallyLog" pointcut-ref="allPointcut"/>
		</aop:aspect> -->
		<!-- <aop:aspect ref="afterThrowing">
			<aop:after-throwing method="exceptionLog" throwing="exceptObj" pointcut-ref="allPointcut"/>
		</aop:aspect> -->
	<!-- </aop:config> -->
	
	<!-- 어노테이션 기반 AOP -->
	<!-- <context:component-scan base-package="com.springbook.biz"></context:component-scan>
	
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy> -->
	
	<context:component-scan base-package="com.springbook.biz"/>
	<aop:aspectj-autoproxy/>
	
	<!-- DataSource 설정 -->
	<context:property-placeholder location="classpath:config/database.properties" />
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
	
	<!-- spring JDBC 설정 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- Transaction 설정 -->
	<bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager" id="txManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	<!-- 트랜잭션 어드바이스 설정 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true"/>
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>
	
	<aop:config>
		<aop:pointcut expression="execution(* com.springbook.biz..*(..))" id="txPointcut"/>
		<aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice" />
	</aop:config>
	
	<!-- mybatis 연동 -->
	<bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:sql-map-config.xml" />
	</bean>
</beans>
