/*
1. 심벌이란?
    ES6에서 도입된 7번째 데이터 타입으로 변경 불가능한 원시 타입의 값이다.
    심벌 값은 다른 값과 중복되지 않는 유일무이한 값이다. 따라서 주로 이름의 충돌 위험이 없는 유일한 프로퍼티 키를 만들기 위해 사용한다.
    프로퍼티 키로 사용할 수 있는 값은 빈 문자열을 포함하는 모든 문자열 또는 심벌 값이다.
2. 심벌값의 생성
2-1. Symbol 함수
    심벌 값은 Symbol 함수를 호출하여 생성한다.
    이 때 생성된 심벌 값은 외부로 노출되지 않아 확인할 수 없으며, 다른 값과 절대 중복되지 않는 유일무이한 값이다.
    Symbol 함수는 String, Number, Boolean 생성자 함수와 달리 new 연산자와 함께 호출하지 않는다. 
    new 연산자와 함께 생성자 함수 또는 클래스를 호출하면 객체가 생성되지만 심벌 값은 변경 불가능한 원시 값이다.
    Symbol 함수에는 선택적으로 문자열을 인수로 전달 할 수 있다. 이 문자열은 생성된 심벌 값에 대한 설명으로 디버깅 용도로만 사용되며, 심벌 값 생성에 영향을 주지 않는다.
    심벌 값은 암묵적으로 문자열이나 숫자 타입으로 변환되지 않는다.
    불리언 타입으로는 암묵적으로 타입 변환된다. 이를 통해 if문 등에서 존재 확인이 가능하다.
2-2. Symbol.for/ Symbol.keyFor 메서드
    Symbol.for 메서드는 인수로 전달 받은 문자열을 키로 사용하여 키와 심벌 값의 쌍들이 저장되어 있는 전역 심벌 레지스트리에서 해당 키와 일치하는 심벌 값을 검색한다.
    Symbol.keyFor 메서드를 사용하면 전역 심벌 레지스트리에 저장된 심벌 값의 키를 추출할 수 있다.
4. 심벌과 프로퍼티 키
    객체의 프로퍼티 키는 빈 문자열을 포함하는 모든 문자열 또는 심벌 값으로 만들 수 있으며, 동적으로 생성할 수도 있다.
    심벌 값으로 프로퍼티 키를 만들면 다른 프로퍼티 키와 절대 충돌하지 않는다.
5. 심벌과 프로퍼티 은닉
    심벌 값을 프로퍼티 키로 사용하여 생성한 프로퍼티는 for...in문이나 object.keys, Object.getOwnPropertyNames 메서드로 찾을 수 없다.
    심벌 값을 프로퍼티 키로 사용하여 프로퍼티를 생성하면 외부에 노출할 필요가 없는 프로퍼티를 은닉할 수 있다.
6. 심벌과 표준 빌트인 객체 확장
    표준 빌트인 객체에 사용자 정의 메서드를 직접 추가하여 확장하는 것은 권장하지 않는다.
    표준 빌트인 객체는 읽기 전용으로 사용하는 것이 좋다.
    이유는 개발자가 직접 추가한 메서드와 미래에 표준 사양으로 추가될 메서드의 이름이 중복될 수 있기 때문이다.
    하지만 중복될 가능성이 없는 심벌 값으로 프로퍼티 키를 생성하여 표준 빌트인 객체를 확장하면 표준 빌트인 객체의 기존 프로퍼티 키와 충돌하지 않는 것은 물론, 표준 사양의 버전이 올라감에 따라 추가될지 모르는 어떤 프로퍼티 키와도 충돌할 위험이 없어 안전하게 표준 빌트인 객체를 확장할 수 있다.
7. Well-Known Symbol
    자바스크립트가 기본 제공하는 빌트인 심벌 값을 ECMAScript 사양에서는 Well-Known Symbol이라 부른다.
    Well-Known Symbol은 자바스크립트 엔진의 내부 알고리즘에 사용된다.
*/
const mySymbol = Symbol();
console.log(typeof mySymbol); //symbol
console.log(mySymbol); //Symbol() -> 외부로 노출되지 않아 확인할 수 없다.

//전역 심벌 레지스트리에 mySymbol1이라는 키로 저장된 심벌 값이 없으면 새로운 심벌 값을 생성
const s1 = Symbol.for('mySymbol1');
//전역 심벌 레지스트리에 mySymbol1이라는 키로 저장된 심벌 값이 있으면 해당 심벌 값을 반환
const s2 = Symbol.for('mySymbol1');
console.log(s1 === s2); //true

console.log(Symbol.keyFor(s1)); //mySymbol1 -> 전역 심벌 레지스트리에 저장된 심벌 값의 키를 추출

//Symbol 함수를 호출하여 생성한 심벌 값은 전역 심벌 레지스트리에 등록되어 관리되지 않는다.
//console.log(keyFor(mySymbol)); //keyFor is not defined

const obj = {
    //심벌 값으로 프로퍼티 키를 생성
    [Symbol.for('mySymbol2')]: 1
};
console.log(obj[Symbol.for('mySymbol2')]); //1